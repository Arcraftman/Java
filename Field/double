### **Java 中的 `double` 类型详解**

`double` 是 Java 中的 **双精度浮点数类型**，用于表示带小数的数值。它是 **64 位**的 IEEE 754 浮点数，具有更高的精度和更大的范围，适用于需要进行更复杂的科学计算或需要较大数值的场景。

---

### **1. `double` 基本特点**

| 特性                | 描述                                                                                                                                              |
|---------------------|---------------------------------------------------------------------------------------------------------------------------------------------------|
| **占用字节**        | 8 字节（64 位）                                                                                                                                     |
| **默认值**          | 0.0                                                                                                                                               |
| **精度**            | 可以表示 **15-16 位有效数字**                                                                                                                        |
| **表示范围**        | 约为 \( \pm4.9 \times 10^{-324} \) 到 \( \pm1.7976931348623157 \times 10^{308} \)                                                                 |
| **存储形式**        | 使用 IEEE 754 双精度浮点数格式，包含符号位、指数位（11 位）和尾数位（52 位）。                                                                        |
| **默认小数类型**    | 在 Java 中，带小数点的数字默认为 `double` 类型（如 `1.5`）。如果需要指定为 `float` 类型，需要在数字后添加 `f`（如 `1.5f`）。                             |

---

### **2. `double` 和 `float` 的区别**

| 特性                | `float`                           | `double`                          |
|---------------------|------------------------------------|------------------------------------|
| **精度**            | 约 6-7 位有效数字                 | 约 15-16 位有效数字               |
| **占用空间**        | 4 字节（32 位）                  | 8 字节（64 位）                  |
| **表示范围**        | \( \pm1.4 \times 10^{-45} \) 到 \( \pm3.4 \times 10^{38} \) | \( \pm4.9 \times 10^{-324} \) 到 \( \pm1.8 \times 10^{308} \) |
| **使用场景**        | 适用于内存敏感和对精度要求较低的场景 | 适用于需要高精度或更大范围的场景 |

---

### **3. `double` 的操作**

#### **3.1 声明和初始化**

public class DoubleExample {
    public static void main(String[] args) {
        // 声明并初始化
        double num1 = 3.14;
        double num2 = -123.456;
        double num3 = 1.5e3;  // 科学计数法，表示 1.5 × 10³ = 1500.0

        System.out.println("num1: " + num1);
        System.out.println("num2: " + num2);
        System.out.println("num3: " + num3);
    }
}


**输出：**

num1: 3.14
num2: -123.456
num3: 1500.0


#### **3.2 基本运算**

public class DoubleOperations {
    public static void main(String[] args) {
        double a = 10.5;
        double b = 4.2;

        // 加法
        System.out.println("加法: " + (a + b));

        // 减法
        System.out.println("减法: " + (a - b));

        // 乘法
        System.out.println("乘法: " + (a * b));

        // 除法
        System.out.println("除法: " + (a / b));

        // 取模
        System.out.println("取模: " + (a % b));
    }
}


**输出：**

加法: 14.7
减法: 6.3
乘法: 44.1
除法: 2.5
取模: 2.0999999999999996


> **注意**：浮点数运算可能会出现 **精度问题**，例如上面模运算的结果。

---

### **4. 精度问题**

浮点数运算中会因存储方式导致精度丢失，尤其是使用二进制表示十进制的小数时。
#### **示例：**

public class PrecisionExample {
    public static void main(String[] args) {
        double num1 = 0.1;
        double num2 = 0.2;

        // 理论值应该是 0.3
        double result = num1 + num2;

        System.out.println("结果: " + result);  // 实际输出可能为 0.30000000000000004
    }
}


**解决办法：**
1. 使用 **`BigDecimal`** 类：

   import java.math.BigDecimal;

   public class BigDecimalExample {
       public static void main(String[] args) {
           BigDecimal num1 = new BigDecimal("0.1");
           BigDecimal num2 = new BigDecimal("0.2");
           BigDecimal result = num1.add(num2);

           System.out.println("结果: " + result);  // 输出: 0.3
       }
   }


2. 如果对误差容忍，可以手动舍入：

   import java.text.DecimalFormat;

   public class RoundingExample {
       public static void main(String[] args) {
           double result = 0.1 + 0.2;
           DecimalFormat df = new DecimalFormat("#.##");
           System.out.println("结果: " + df.format(result));  // 输出: 0.3
       }
   }


---

### **5. 特殊值**

`double` 类型中有几个特殊值：

| 特殊值           | 描述                                              | 示例                                      |
|------------------|---------------------------------------------------|-------------------------------------------|
| **`Double.POSITIVE_INFINITY`** | 正无穷大                                         | 1.0 / 0.0                                |
| **`Double.NEGATIVE_INFINITY`** | 负无穷大                                         | -1.0 / 0.0                               |
| **`Double.NaN`**               | 表示 “不是数字”（Not a Number），通常由非法操作产生 | 0.0 / 0.0 或 `Math.sqrt(-1)`             |

#### **示例：**

public class SpecialValuesExample {
    public static void main(String[] args) {
        double positiveInfinity = 1.0 / 0.0;
        double negativeInfinity = -1.0 / 0.0;
        double notANumber = 0.0 / 0.0;

        System.out.println("正无穷大: " + positiveInfinity);
        System.out.println("负无穷大: " + negativeInfinity);
        System.out.println("NaN: " + notANumber);

        // 检查特殊值
        System.out.println("是否是无穷大: " + Double.isInfinite(positiveInfinity));
        System.out.println("是否是 NaN: " + Double.isNaN(notANumber));
    }
}


**输出：**

正无穷大: Infinity
负无穷大: -Infinity
NaN: NaN
是否是无穷大: true
是否是 NaN: true


---

### **6. 自动装箱与拆箱**

在 Java 中，`double` 有对应的包装类 `Double`，支持自动装箱和拆箱：


public class AutoboxingExample {
    public static void main(String[] args) {
        // 自动装箱
        Double wrappedDouble = 3.14;

        // 自动拆箱
        double primitiveDouble = wrappedDouble;

        System.out.println("包装类型: " + wrappedDouble);
        System.out.println("基本类型: " + primitiveDouble);
    }
}


---

### **总结**
- **使用场景：** `double` 适用于需要浮点数计算但对精度要求不严格的场景，例如科学计算、工程计算等。
- **精度问题：** 遇到精度要求高的场景时，推荐使用 `BigDecimal`。
- **优势：** 范围更大，性能优于 `BigDecimal`，在处理高性能计算时尤为适合。