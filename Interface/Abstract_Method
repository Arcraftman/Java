抽象方法（Abstract Method）详解
什么是抽象方法？
抽象方法是 没有方法体（方法实现） 的方法，仅仅定义了方法的签名和返回类型，具体的实现由子类来完成。抽象方法在定义时必须用 abstract 关键字修饰，并且只能出现在抽象类或接口中。


抽象方法的规则
必须在抽象类或接口中声明：

如果一个类中有抽象方法，则该类必须声明为 abstract 类。
接口中的方法默认是抽象的。
不能有方法体：

抽象方法只定义方法的名称、参数和返回类型，不能有实现代码。
子类必须实现抽象方法：

如果子类继承了一个包含抽象方法的类，那么子类必须实现所有抽象方法，除非子类本身也声明为抽象类。
抽象类不能直接实例化：

抽象类的目的是为子类提供一个模板，因此它不能被直接实例化。


抽象方法与接口
在接口中，所有未标注为 default 或 static 的方法都是抽象方法。因此，接口中的抽象方法不需要显式使用 abstract 关键字。

抽象方法的特点
1. 强制子类实现特定行为
抽象方法规定了子类必须实现的方法，从而保证了子类的行为一致性。例如，在设计动物类时，makeSound() 方法的存在保证了所有子类都有发声功能。

2. 面向对象的多态性
通过抽象类和抽象方法，可以使用父类引用来调用子类的实现，从而实现多态。

3. 不能使用 final 或 private 修饰
抽象方法的目的是让子类实现，因此不能用 final 修饰（final 意味着不能被重写），也不能用 private 修饰（private 意味着子类无法访问）。

抽象方法 VS 普通方法
特点	抽象方法	普通方法
定义	只有方法签名，没有方法体。	有方法签名和方法体。
修饰符	必须用 abstract 修饰（接口中可以省略）。	不需要 abstract，可以有任何合法修饰符。
所在类	必须在抽象类或接口中定义。	可以在普通类或抽象类中定义。
子类实现	子类必须实现所有抽象方法，除非子类也是抽象类。	子类可以选择重写或不重写普通方法。

