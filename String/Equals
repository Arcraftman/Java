### **Java 中 `equals()` 方法详解**

在 Java 中，`equals()` 方法是 `Object` 类定义的方法，用于比较两个对象的**内容是否相等**。`String` 类重写了 `equals()` 方法，用来比较字符串的内容，而不是引用地址。

---

### **1. `String` 中的 `equals()` 实现**
`String` 类重写了 `Object` 类的 `equals()` 方法，具体实现如下：

#### **源码**

public boolean equals(Object anObject) {
    if (this == anObject) {
        return true; // 如果引用地址相同，直接返回 true
    }
    if (anObject instanceof String) {
        String anotherString = (String) anObject;
        int n = value.length;
        if (n == anotherString.value.length) { // 长度相等时逐个比较字符
            char v1[] = value;
            char v2[] = anotherString.value;
            int i = 0;
            while (n-- != 0) {
                if (v1[i] != v2[i])
                    return false; // 有任何一个字符不同，返回 false
                i++;
            }
            return true; // 全部字符相同，返回 true
        }
    }
    return false; // 如果类型不同，返回 false
}


---

### **2. 使用示例**

public class ClassTest {
    public static void main(String[] args) {
        String s1 = "hello";
        String s2 = "hello";
        String s3 = new String("hello");
        String s4 = "HELLO";

        System.out.println(s1.equals(s2)); // true (内容相同)
        System.out.println(s1.equals(s3)); // true (内容相同)
        System.out.println(s1.equals(s4)); // false (大小写不同)
    }
}


---

### **3. 与 `==` 的区别**

| **对比项**       | **`equals()`**               | **`==`**                     |
|-------------------|-----------------------------|-------------------------------|
| **比较内容**      | 对象的内容是否相等           | 引用地址是否相等              |
| **比较方式**      | 调用类的 `equals()` 方法      | 比较两个引用的内存地址         |
| **适用场景**      | 比较值是否相等               | 比较两个引用是否指向同一对象   |

#### **例子**

String s1 = "hello";
String s2 = new String("hello");

System.out.println(s1 == s2);         // false (不同的引用地址)
System.out.println(s1.equals(s2));   // true (内容相同)


---

### **4. 注意事项**

#### **（1）区分大小写**
`String` 的 `equals()` 方法是区分大小写的。如果不希望区分大小写，可以使用 `equalsIgnoreCase()` 方法。


String s1 = "hello";
String s2 = "HELLO";

System.out.println(s1.equals(s2));            // false
System.out.println(s1.equalsIgnoreCase(s2)); // true


---

#### **（2）`null` 值的处理**
- 如果调用字符串是 `null`，调用 `equals()` 会抛出 `NullPointerException`。
- 如果传入参数是 `null`，`equals()` 会返回 `false`。


String s1 = null;
String s2 = "hello";

System.out.println(s2.equals(s1)); // false
System.out.println(s1.equals(s2)); // NullPointerException


**解决方法**：在不确定是否为 `null` 时，推荐将常量放在前面：

System.out.println("hello".equals(s1)); // false


---

#### **（3）与 `intern()` 的结合**
当两个字符串内容相等但引用不同（如堆对象和字符串池对象），`equals()` 比较内容仍会返回 `true`，但 `==` 比较会返回 `false`。可以通过 `intern()` 方法将堆对象转换为字符串池对象，确保 `==` 比较相等。


String s1 = new String("hello");
String s2 = "hello";

System.out.println(s1.equals(s2));       // true
System.out.println(s1 == s2);            // false
System.out.println(s1.intern() == s2);  // true


---

### **5. 适用场景**

#### **推荐使用 `equals()` 的场景**
1. **内容比较**：用于判断两个字符串的值是否相等。
2. **用户输入校验**：如检查用户名和密码是否匹配。
3. **字符串内容判定**：如在集合中查找是否存在相同内容的字符串。

#### **推荐使用 `==` 的场景**
1. **引用地址比较**：如检查是否指向同一对象。
2. **性能优化**：在字符串池中确保所有相等内容的字符串指向同一引用时，`==` 的性能更高。

---

### **6. 总结**

- **`equals()`** 比较的是字符串的**内容**，适用于值比较。
- **`==`** 比较的是字符串的**引用地址**，适用于检查是否是同一个对象。
- 对于内容相等但引用不同的字符串，推荐优先使用 `equals()` 方法。